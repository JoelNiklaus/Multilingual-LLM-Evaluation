{
  "results": {
    "arc_challenge": {
      "alias": "arc_challenge",
      "acc,none": 0.5708191126279863,
      "acc_stderr,none": 0.014464085894870653,
      "acc_norm,none": 0.6092150170648464,
      "acc_norm_stderr,none": 0.014258563880513778
    },
    "arc_de": {
      "alias": "arc_de",
      "acc,none": 0.4516680923866553,
      "acc_stderr,none": 0.014561631733961952,
      "acc_norm,none": 0.48845166809238666,
      "acc_norm_stderr,none": 0.01462624061094917
    },
    "arc_es": {
      "alias": "arc_es",
      "acc,none": 0.48034188034188036,
      "acc_stderr,none": 0.014612577586532009,
      "acc_norm,none": 0.5196581196581197,
      "acc_norm_stderr,none": 0.014612577586532009
    },
    "arc_fr": {
      "alias": "arc_fr",
      "acc,none": 0.47818648417450815,
      "acc_stderr,none": 0.014616213861436907,
      "acc_norm,none": 0.5201026518391788,
      "acc_norm_stderr,none": 0.014618314049208827
    },
    "arc_it": {
      "alias": "arc_it",
      "acc,none": 0.4816082121471343,
      "acc_stderr,none": 0.01462024252732681,
      "acc_norm,none": 0.5431993156544055,
      "acc_norm_stderr,none": 0.014575436127048206
    }
  },
  "group_subtasks": {
    "arc_challenge": [],
    "arc_de": [],
    "arc_es": [],
    "arc_fr": [],
    "arc_it": []
  },
  "configs": {
    "arc_challenge": {
      "task": "arc_challenge",
      "tag": [
        "ai2_arc"
      ],
      "dataset_path": "allenai/ai2_arc",
      "dataset_name": "ARC-Challenge",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Question: {{question}}\nAnswer:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nAnswer:",
      "metadata": {
        "version": 1.0
      }
    },
    "arc_de": {
      "task": "arc_de",
      "tag": [
        "arc_multilingual"
      ],
      "dataset_path": "alexandrainst/m_arc",
      "dataset_name": "de",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        # breakpoint()\n        out_doc = {\n            \"id\": doc[\"id\"],\n            \"query\": \"Question: \" + preprocess(doc[\"instruction\"]) + \"\\nAnswer:\",\n            \"choices\": [\n                preprocess(option)\n                for option in [\n                    doc[\"option_a\"],\n                    doc[\"option_b\"],\n                    doc[\"option_c\"],\n                    doc[\"option_d\"],\n                    doc[\"option_e\"],\n                ]\n                if option\n            ],\n            \"gold\": [\"A\", \"B\", \"C\", \"D\", \"E\"].index(doc[\"answer\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "query",
      "doc_to_target": "gold",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "query",
      "metadata": {
        "version": 2.0
      }
    },
    "arc_es": {
      "task": "arc_es",
      "tag": [
        "arc_multilingual"
      ],
      "dataset_path": "alexandrainst/m_arc",
      "dataset_name": "es",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        # breakpoint()\n        out_doc = {\n            \"id\": doc[\"id\"],\n            \"query\": \"Question: \" + preprocess(doc[\"instruction\"]) + \"\\nAnswer:\",\n            \"choices\": [\n                preprocess(option)\n                for option in [\n                    doc[\"option_a\"],\n                    doc[\"option_b\"],\n                    doc[\"option_c\"],\n                    doc[\"option_d\"],\n                    doc[\"option_e\"],\n                ]\n                if option\n            ],\n            \"gold\": [\"A\", \"B\", \"C\", \"D\", \"E\"].index(doc[\"answer\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "query",
      "doc_to_target": "gold",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "query",
      "metadata": {
        "version": 2.0
      }
    },
    "arc_fr": {
      "task": "arc_fr",
      "tag": [
        "arc_multilingual"
      ],
      "dataset_path": "alexandrainst/m_arc",
      "dataset_name": "fr",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        # breakpoint()\n        out_doc = {\n            \"id\": doc[\"id\"],\n            \"query\": \"Question: \" + preprocess(doc[\"instruction\"]) + \"\\nAnswer:\",\n            \"choices\": [\n                preprocess(option)\n                for option in [\n                    doc[\"option_a\"],\n                    doc[\"option_b\"],\n                    doc[\"option_c\"],\n                    doc[\"option_d\"],\n                    doc[\"option_e\"],\n                ]\n                if option\n            ],\n            \"gold\": [\"A\", \"B\", \"C\", \"D\", \"E\"].index(doc[\"answer\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "query",
      "doc_to_target": "gold",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "query",
      "metadata": {
        "version": 2.0
      }
    },
    "arc_it": {
      "task": "arc_it",
      "tag": [
        "arc_multilingual"
      ],
      "dataset_path": "alexandrainst/m_arc",
      "dataset_name": "it",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        # breakpoint()\n        out_doc = {\n            \"id\": doc[\"id\"],\n            \"query\": \"Question: \" + preprocess(doc[\"instruction\"]) + \"\\nAnswer:\",\n            \"choices\": [\n                preprocess(option)\n                for option in [\n                    doc[\"option_a\"],\n                    doc[\"option_b\"],\n                    doc[\"option_c\"],\n                    doc[\"option_d\"],\n                    doc[\"option_e\"],\n                ]\n                if option\n            ],\n            \"gold\": [\"A\", \"B\", \"C\", \"D\", \"E\"].index(doc[\"answer\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "query",
      "doc_to_target": "gold",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "query",
      "metadata": {
        "version": 2.0
      }
    }
  },
  "versions": {
    "arc_challenge": 1.0,
    "arc_de": 2.0,
    "arc_es": 2.0,
    "arc_fr": 2.0,
    "arc_it": 2.0
  },
  "n-shot": {
    "arc_challenge": 25,
    "arc_de": 25,
    "arc_es": 25,
    "arc_fr": 25,
    "arc_it": 25
  },
  "higher_is_better": {
    "arc_challenge": {
      "acc": true,
      "acc_norm": true
    },
    "arc_de": {
      "acc": true,
      "acc_norm": true
    },
    "arc_es": {
      "acc": true,
      "acc_norm": true
    },
    "arc_fr": {
      "acc": true,
      "acc_norm": true
    },
    "arc_it": {
      "acc": true,
      "acc_norm": true
    }
  },
  "n-samples": {
    "arc_it": {
      "original": 1169,
      "effective": 1169
    },
    "arc_fr": {
      "original": 1169,
      "effective": 1169
    },
    "arc_es": {
      "original": 1170,
      "effective": 1170
    },
    "arc_de": {
      "original": 1169,
      "effective": 1169
    },
    "arc_challenge": {
      "original": 1172,
      "effective": 1172
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=meta-llama/Meta-Llama-3.1-8B-Instruct,trust_remote_code=True",
    "batch_size": "1",
    "batch_sizes": [],
    "device": null,
    "use_cache": "./output/cache/meta-llama/Meta-Llama-3.1-8B-Instruct/ARC",
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": null,
  "date": 1721770383.1362145,
  "pretty_env_info": "PyTorch version: 2.3.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.4 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.5.0-44-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA H100 PCIe\nGPU 1: NVIDIA H100 PCIe\nGPU 2: NVIDIA H100 PCIe\nGPU 3: NVIDIA H100 PCIe\n\nNvidia driver version: 535.183.06\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      52 bits physical, 57 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             124\nOn-line CPU(s) list:                0-123\nVendor ID:                          AuthenticAMD\nModel name:                         AMD EPYC 9554 64-Core Processor\nCPU family:                         25\nModel:                              17\nThread(s) per core:                 1\nCore(s) per socket:                 62\nSocket(s):                          2\nStepping:                           1\nBogoMIPS:                           6190.69\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm rep_good nopl cpuid extd_apicid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw perfctr_core invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves avx512_bf16 clzero xsaveerptr wbnoinvd arat npt lbrv nrip_save tsc_scale vmcb_clean pausefilter pfthreshold v_vmsave_vmload vgif vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid fsrm flush_l1d arch_capabilities\nVirtualization:                     AMD-V\nHypervisor vendor:                  KVM\nVirtualization type:                full\nL1d cache:                          7.8 MiB (124 instances)\nL1i cache:                          7.8 MiB (124 instances)\nL2 cache:                           62 MiB (124 instances)\nL3 cache:                           1.9 GiB (124 instances)\nNUMA node(s):                       2\nNUMA node0 CPU(s):                  0-61\nNUMA node1 CPU(s):                  62-123\nVulnerability Gather data sampling: Not affected\nVulnerability Itlb multihit:        Not affected\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Not affected\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Not affected\nVulnerability Retbleed:             Not affected\nVulnerability Spec rstack overflow: Vulnerable: Safe RET, no microcode\nVulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:           Mitigation; Enhanced / Automatic IBRS; IBPB conditional; STIBP disabled; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                Not affected\nVulnerability Tsx async abort:      Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] torch==2.3.1\n[pip3] triton==2.3.1\n[conda] Could not collect",
  "transformers_version": "4.43.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_eos_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    "128000"
  ],
  "eot_token_id": 128009,
  "max_length": 131072,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "meta-llama/Meta-Llama-3.1-8B-Instruct",
  "model_name_sanitized": "meta-llama__Meta-Llama-3.1-8B-Instruct",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 3196.909614337,
  "end_time": 3219.800612081,
  "total_evaluation_time_seconds": "22.890997743999833"
}